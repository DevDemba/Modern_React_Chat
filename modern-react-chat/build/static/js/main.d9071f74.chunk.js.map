{"version":3,"sources":["redux/selectors.js","components/MessageItem.jsx","redux/actions.js","components/MessageList.jsx","components/MessageBar.jsx","redux/actionTypes.js","components/Chat.jsx","App.js","redux/reducers.js","serviceWorker.js","index.js"],"names":["getMessageState","store","messages","getMessageById","id","byIds","getMessage","allIds","getMessageList","map","MessageItem","classes","this","props","ListItem","alignItems","ListItemText","primary","secondary","Fragment","Typography","component","variant","className","inline","color","message","React","Component","withStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","display","getMessageServer","axios","get","then","res","json","messageServer","setState","console","log","MessageList","state","input","List","item","onChange","username","key","PureComponent","connect","MessageBar","handleChange","e","target","value","handleAddMessage","preventDefault","currentMessage","concat","addMessage","Box","flexDirection","TextField","placeholder","type","Button","onClick","Chat","Container","App","messageReducer","action","Boolean","window","location","hostname","match","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","rootElement","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d9071f74.chunk.js","sourcesContent":["export const getMessageState = store => store.messages\r\n\r\nexport const getMessageList = store =>\r\n  getMessageState(store) ? getMessageState(store).allIds : []\r\n\r\nexport const getMessageById = (store, id) =>\r\n  getMessageState(store) ? { ...getMessageState(store).byIds[id], id } : {}\r\n\r\nexport const getMessage = store =>\r\n  getMessageList(store).map(id => getMessageById(store, id))","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nclass MessageItem extends React.Component {\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return(\r\n            <ListItem alignItems=\"center\"><br/>\r\n                <ListItemText\r\n                primary={` This message is send by `}\r\n                secondary={\r\n                    <React.Fragment>\r\n                        <Typography\r\n                            component=\"span\"\r\n                            variant=\"body2\"\r\n                            className={classes.inline}\r\n                            color=\"textPrimary\"\r\n                        >\r\n                        </Typography>\r\n                    {this.props.message}\r\n                    </React.Fragment>\r\n                }   \r\n            />\r\n            </ListItem>\r\n        \r\n        )\r\n        \r\n    }\r\n\r\n}\r\n\r\nexport default withStyles(theme => ({\r\n    root: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    inline: {\r\n        display: 'inline',\r\n    },\r\n}))(MessageItem);","import { ADD_MESSAGE } from './actionTypes';\r\nimport axios from 'axios';\r\n\r\nexport const addMessage = (currentMessage) => {\r\n  console.log('dans redux actions : ', currentMessage)\r\n\treturn {\r\n    type:  ADD_MESSAGE,\r\n    currentMessage\r\n  }\r\n};\r\n\r\nexport const getMessageServer = () => {\r\n\r\n  axios.get(`https://my-json-server.typicode.com/tlenclos/formation-react-fake-server/messages`)\r\n    .then(res => res.json())\r\n    .then((messageServer) => {\r\n      this.setState({messageServer: messageServer});\r\n    })\r\n    console.log('hello')\r\n  \r\n}\r\n\r\n","import React, { PureComponent } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { getMessage } from \"../redux/selectors\";\r\n\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport MessageItem from './MessageItem';\r\nimport List from '@material-ui/core/List';\r\nimport { getMessageServer } from '../redux/actions';\r\n\r\nclass MessageList extends PureComponent {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            input: '',\r\n            messages: [],\r\n            messageServer: []\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <List className={classes.root}>\r\n                <div>\r\n                    <ul>\r\n                        { this.state.messageServer.map((item) => { return <li onChange={this.getMessageServer}>{item.username}</li>})}\r\n                    </ul>\r\n                </div>\r\n                {this.state.messages.map((item) => { return <MessageItem\r\n                key={item.id}\r\n                id={item.id}\r\n                message={item.message} \r\n                />\r\n                })}\r\n            </List>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default withStyles(theme => ({\r\n    root: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    inline: {\r\n        display: 'inline',\r\n    },\r\n})) (connect(state => ({ messages: getMessage(state) }),  { getMessageServer}\r\n)(MessageList));\r\n\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addMessage } from '../redux/actions';\r\nimport MessageItem from './MessageItem';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nclass MessageBar extends React.Component {\r\n\r\n        constructor(props) {\r\n            super(props);\r\n            this.state = {\r\n            input: '',\r\n            messages: []\r\n            }\r\n        }\r\n\r\n        handleChange = (e) => {\r\n            this.setState({input: e.target.value});  \r\n          /*    console.log('handleChange change de valeur') */\r\n        }\r\n        \r\n        handleAddMessage = (e) => {\r\n            e.preventDefault();\r\n            const currentMessage = this.state.input;\r\n            this.setState({\r\n                input: '',\r\n                messages: this.state.messages.concat(currentMessage)\r\n            });\r\n            this.props.addMessage(currentMessage);\r\n            console.log(this.state)\r\n        }\r\n\r\n        render() {\r\n            return ( \r\n                <Box display=\"flex\" flexDirection=\"column\">\r\n                    <ul>\r\n                        {this.state.messages.map((message, id) => {\r\n                            return (<MessageItem key={id} message={message}/>)\r\n                        })}\r\n                    </ul>\r\n                    <TextField \r\n                        placeholder=\"Votre message\" \r\n                        type=\"text\"\r\n                        value={this.state.input}\r\n                        onChange={this.handleChange}\r\n                    /><br/>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={this.handleAddMessage}\r\n                        >\r\n                        Envoyer\r\n                    </Button>\r\n                </Box>\r\n            );\r\n        }    \r\n\r\n}\r\n\r\n\r\nexport default connect(\r\n    null,\r\n    { addMessage }\r\n)(MessageBar);","export const ADD_MESSAGE = 'ADD_MESSAGE';\r\nexport const LOAD_MESSAGES_PENDING = 'LOAD_MESSAGES_PENDING';\r\nexport const LOAD_MESSAGES_SUCCESS = 'LOAD_MESSAGES_SUCCESS';\r\nexport const LOAD_MESSAGES_ERROR = 'LOAD_MESSAGES_ERROR';","import React from 'react';\r\nimport MessageList from './MessageList';\r\nimport MessageBar from './MessageBar';\r\nimport Container from '@material-ui/core/Container';\r\n\r\n\r\nclass Chat extends React.Component {\r\n        render() {\r\n            return (\r\n                <Container maxWidth=\"xs\">\r\n                    <MessageList/>\r\n                    <MessageBar/>\r\n                </Container>\r\n            );\r\n        }\r\n\r\n}\r\n\r\nexport default Chat;","import React from 'react';\nimport Chat from './components/Chat';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>My Modern Chat</h1>\n      </header>\n      <div className=\"App-center\">\n        <Chat/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ADD_MESSAGE } from './actionTypes';\r\nimport { getMessageServer } from './actions';\r\n\r\nconst messageReducer = (state = [], action) => {\r\n    switch (action.type) {\r\n      case ADD_MESSAGE:\r\n        return state.concat(action.currentMessage);\r\n      case getMessageServer: \r\n        return state.messageServer;\r\n      default:\r\n        return state;\r\n    }\r\n};\r\n\r\nexport default messageReducer;\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {createStore} from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './redux/reducers';\nimport * as serviceWorker from './serviceWorker';\n  \nconst store = createStore(rootReducer ,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n    <Provider store={store}>>\n        <App />\n    </Provider>, \n    rootElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}